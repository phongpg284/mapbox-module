{"ast":null,"code":"var _jsxFileName = \"E:\\\\imet\\\\mapbox-module\\\\react-mapbox\\\\src\\\\TrackingMap\\\\TrackingMap.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Mapbox from \"../Mapbox\";\nimport * as turf from \"@turf/turf\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst accessToken = process.env.REACT_APP_MAPBOX_TOKEN_ACCESS;\n\nconst TrackingMap = () => {\n  _s();\n\n  var _workAreaData$data;\n\n  const [workAreaData, setWorkAreaData] = useState();\n  const [cropsData, setCropsData] = useState();\n  const [center, setCenter] = useState();\n  useEffect(() => {\n    fetch(process.env.REACT_APP_API_URL + \"/get_project\", {\n      method: \"GET\"\n    }).then(res => res.json()).then(data => {\n      const workArea = data.project.work_area;\n      const bbox = [workArea.bottom, workArea.right, workArea.top, workArea.left];\n      setWorkAreaData({\n        type: \"geojson\",\n        data: turf.bboxPolygon(bbox)\n      });\n      setCenter(turf.center(turf.bboxPolygon(bbox)).geometry.coordinates);\n      const crops = data.project.devices.map(device => turf.polygon([device.crop.map(coordinate => [coordinate[1], coordinate[0]])], {\n        icon: device.icon,\n        width: device.width\n      }));\n      const featureCollections = turf.featureCollection(crops);\n      setCropsData({\n        type: \"geojson\",\n        data: featureCollections\n      });\n    }).catch(err => console.log(err));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title fw-bold fs-3 mb-4 d-flex\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Tracking Map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mapbox-container\",\n      children: /*#__PURE__*/_jsxDEV(Mapbox, {\n        accessToken: accessToken,\n        workArea: workAreaData,\n        crops: cropsData,\n        fitBounds: workAreaData === null || workAreaData === void 0 ? void 0 : (_workAreaData$data = workAreaData.data) === null || _workAreaData$data === void 0 ? void 0 : _workAreaData$data.bbox,\n        trackingApiEndpoint: process.env.REACT_APP_API_URL + \"/get_track?last_index\" // center={center}\n        ,\n        maxWidth: \"100%\",\n        height: \"calc(100vh - 175px)\",\n        lockZoom: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TrackingMap, \"oss22ZpqUw1A4xPrj8NlhZohisk=\");\n\n_c = TrackingMap;\nexport default TrackingMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrackingMap\");","map":{"version":3,"sources":["E:/imet/mapbox-module/react-mapbox/src/TrackingMap/TrackingMap.tsx"],"names":["useEffect","useState","Mapbox","turf","accessToken","process","env","REACT_APP_MAPBOX_TOKEN_ACCESS","TrackingMap","workAreaData","setWorkAreaData","cropsData","setCropsData","center","setCenter","fetch","REACT_APP_API_URL","method","then","res","json","data","workArea","project","work_area","bbox","bottom","right","top","left","type","bboxPolygon","geometry","coordinates","crops","devices","map","device","polygon","crop","coordinate","icon","width","featureCollections","featureCollection","catch","err","console","log"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,OAAO,KAAKC,IAAZ,MAAsB,YAAtB;;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,6BAAhC;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAAA;;AACxB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,EAAhD;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,EAA1C;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,EAApC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,KAAK,CAACV,OAAO,CAACC,GAAR,CAAYU,iBAAZ,GAAgC,cAAjC,EAAiD;AACpDC,MAAAA,MAAM,EAAE;AAD4C,KAAjD,CAAL,CAGGC,IAHH,CAGSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHjB,EAIGF,IAJH,CAISG,IAAD,IAAU;AACd,YAAMC,QAAQ,GAAGD,IAAI,CAACE,OAAL,CAAaC,SAA9B;AACA,YAAMC,IAAsC,GAAG,CAC7CH,QAAQ,CAACI,MADoC,EAE7CJ,QAAQ,CAACK,KAFoC,EAG7CL,QAAQ,CAACM,GAHoC,EAI7CN,QAAQ,CAACO,IAJoC,CAA/C;AAMAnB,MAAAA,eAAe,CAAC;AACdoB,QAAAA,IAAI,EAAE,SADQ;AAEdT,QAAAA,IAAI,EAAElB,IAAI,CAAC4B,WAAL,CAAiBN,IAAjB;AAFQ,OAAD,CAAf;AAIAX,MAAAA,SAAS,CAACX,IAAI,CAACU,MAAL,CAAYV,IAAI,CAAC4B,WAAL,CAAiBN,IAAjB,CAAZ,EAAoCO,QAApC,CAA6CC,WAA9C,CAAT;AAEA,YAAMC,KAAK,GAAGb,IAAI,CAACE,OAAL,CAAaY,OAAb,CAAqBC,GAArB,CAA0BC,MAAD,IACrClC,IAAI,CAACmC,OAAL,CACE,CACED,MAAM,CAACE,IAAP,CAAYH,GAAZ,CAAiBI,UAAD,IAAqB,CACnCA,UAAU,CAAC,CAAD,CADyB,EAEnCA,UAAU,CAAC,CAAD,CAFyB,CAArC,CADF,CADF,EAOE;AAAEC,QAAAA,IAAI,EAAEJ,MAAM,CAACI,IAAf;AAAqBC,QAAAA,KAAK,EAAEL,MAAM,CAACK;AAAnC,OAPF,CADY,CAAd;AAWA,YAAMC,kBAAkB,GAAGxC,IAAI,CAACyC,iBAAL,CAAuBV,KAAvB,CAA3B;AACAtB,MAAAA,YAAY,CAAC;AACXkB,QAAAA,IAAI,EAAE,SADK;AAEXT,QAAAA,IAAI,EAAEsB;AAFK,OAAD,CAAZ;AAID,KAlCH,EAmCGE,KAnCH,CAmCUC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAnClB;AAoCD,GArCQ,EAqCN,EArCM,CAAT;AAuCA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,gCAAf;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BACA,QAAC,MAAD;AACI,QAAA,WAAW,EAAE1C,WADjB;AAEI,QAAA,QAAQ,EAAEK,YAFd;AAGI,QAAA,KAAK,EAAEE,SAHX;AAII,QAAA,SAAS,EAAEF,YAAF,aAAEA,YAAF,6CAAEA,YAAY,CAAEY,IAAhB,uDAAE,mBAAoBI,IAJnC;AAKI,QAAA,mBAAmB,EACjBpB,OAAO,CAACC,GAAR,CAAYU,iBAAZ,GAAgC,uBANtC,CAQI;AARJ;AASI,QAAA,QAAQ,EAAC,MATb;AAUI,QAAA,MAAM,EAAC,qBAVX;AAWI,QAAA,QAAQ;AAXZ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CAnED;;GAAMR,W;;KAAAA,W;AAqEN,eAAeA,WAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport Mapbox from \"../Mapbox\";\r\n\r\nimport * as turf from \"@turf/turf\";\r\n\r\nconst accessToken = process.env.REACT_APP_MAPBOX_TOKEN_ACCESS;\r\n\r\nconst TrackingMap = () => {\r\n  const [workAreaData, setWorkAreaData] = useState<any>();\r\n  const [cropsData, setCropsData] = useState<any>();\r\n  const [center, setCenter] = useState<any>();\r\n  useEffect(() => {\r\n    fetch(process.env.REACT_APP_API_URL + \"/get_project\", {\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        const workArea = data.project.work_area;\r\n        const bbox: [number, number, number, number] = [\r\n          workArea.bottom,\r\n          workArea.right,\r\n          workArea.top,\r\n          workArea.left,\r\n        ];\r\n        setWorkAreaData({\r\n          type: \"geojson\",\r\n          data: turf.bboxPolygon(bbox),\r\n        });\r\n        setCenter(turf.center(turf.bboxPolygon(bbox)).geometry.coordinates);\r\n\r\n        const crops = data.project.devices.map((device: any) =>\r\n          turf.polygon(\r\n            [\r\n              device.crop.map((coordinate: any) => [\r\n                coordinate[1],\r\n                coordinate[0],\r\n              ]),\r\n            ],\r\n            { icon: device.icon, width: device.width }\r\n          )\r\n        );\r\n        const featureCollections = turf.featureCollection(crops);\r\n        setCropsData({\r\n          type: \"geojson\",\r\n          data: featureCollections,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"content\">\r\n        <div className=\"title fw-bold fs-3 mb-4 d-flex\">\r\n          <div>Tracking Map</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"mapbox-container\">\r\n      <Mapbox\r\n          accessToken={accessToken}\r\n          workArea={workAreaData}\r\n          crops={cropsData}\r\n          fitBounds={workAreaData?.data?.bbox}\r\n          trackingApiEndpoint={\r\n            process.env.REACT_APP_API_URL + \"/get_track?last_index\"\r\n          }\r\n          // center={center}\r\n          maxWidth=\"100%\"\r\n          height=\"calc(100vh - 175px)\"\r\n          lockZoom\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrackingMap;\r\n"]},"metadata":{},"sourceType":"module"}