{"ast":null,"code":"var _jsxFileName = \"E:\\\\imet\\\\mapbox-module\\\\react-mapbox\\\\src\\\\Mapbox\\\\TrackingDrawWrapper.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Feature, Image, Layer, Popup, Source } from \"react-mapbox-gl\";\nimport { getTrackingData } from \"./getTrackingData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TrackingDrawDevice = ({\n  endpoint,\n  cropData,\n  deviceId,\n  zoom\n}) => {\n  _s();\n\n  const paintStyles = baseWidth => {\n    const baseZoom = zoom ? zoom : 16;\n    return {\n      \"line-color\": \"yellow\",\n      \"line-opacity\": 0.5,\n      \"line-width\": {\n        type: \"exponential\",\n        base: 2,\n        stops: [[0, baseWidth * Math.pow(2, 0 - baseZoom)], [24, baseWidth * Math.pow(2, 24 - baseZoom)]]\n      }\n    };\n  };\n\n  const [trackingData, setTrackingData] = useState({\n    type: \"geojson\",\n    data: {\n      type: \"Feature\",\n      geometry: {\n        type: \"LineString\",\n        coordinates: []\n      }\n    }\n  });\n  const [showPopup, setShowPopup] = useState(false);\n  useEffect(() => {\n    return () => {\n      setTrackingData({});\n    };\n  }, []);\n  useEffect(() => {\n    if (endpoint) getTrackingData(0, endpoint, setTrackingData, deviceId);\n  }, [endpoint, deviceId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Source, {\n      id: `device${deviceId}`,\n      geoJsonSource: trackingData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Layer, {\n      type: \"line\",\n      id: `device${deviceId}`,\n      sourceId: `device${deviceId}`,\n      paint: paintStyles(cropData.properties.width)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Image, {\n      id: `device${deviceId}-icon`,\n      url: cropData.properties.icon,\n      options: {\n        pixelRatio: 6\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), trackingData.data.geometry.coordinates.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Layer, {\n        type: \"symbol\",\n        id: `marker${deviceId}`,\n        layout: {\n          \"icon-image\": `device${deviceId}-icon`\n        },\n        children: /*#__PURE__*/_jsxDEV(Feature, {\n          coordinates: trackingData.data.geometry.coordinates[trackingData.data.geometry.coordinates.length - 1],\n          onClick: () => setShowPopup(!showPopup)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), showPopup && /*#__PURE__*/_jsxDEV(Popup, {\n        coordinates: trackingData.data.geometry.coordinates[trackingData.data.geometry.coordinates.length - 1],\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Coordinates:\", trackingData.data.geometry.coordinates[trackingData.data.geometry.coordinates.length - 1]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) // <Marker\n    //   coordinates={\n    //     trackingData.data.geometry.coordinates[\n    //       trackingData.data.geometry.coordinates.length - 1\n    //     ]\n    //   }\n    //   anchor=\"bottom\"\n    // >\n    //   <img src={cropData.properties.icon} style={{ height: \"20px\" }} />\n    // </Marker>\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TrackingDrawDevice, \"Ia56llucYDARKdEemECh4jsxSOI=\");\n\n_c = TrackingDrawDevice;\n\nconst TrackingDrawWrapper = ({\n  endpoint,\n  crops,\n  zoom\n}) => {\n  _s2();\n\n  useEffect(() => {\n    console.log(\"track render\");\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: crops && crops.data.features.map((feature, index) => /*#__PURE__*/_jsxDEV(TrackingDrawDevice, {\n      endpoint: endpoint,\n      cropData: feature,\n      deviceId: index,\n      zoom: zoom\n    }, feature.properties.width, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(TrackingDrawWrapper, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c2 = TrackingDrawWrapper;\nexport default TrackingDrawWrapper;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TrackingDrawDevice\");\n$RefreshReg$(_c2, \"TrackingDrawWrapper\");","map":{"version":3,"sources":["E:/imet/mapbox-module/react-mapbox/src/Mapbox/TrackingDrawWrapper.tsx"],"names":["useEffect","useState","Feature","Image","Layer","Popup","Source","getTrackingData","TrackingDrawDevice","endpoint","cropData","deviceId","zoom","paintStyles","baseWidth","baseZoom","type","base","stops","Math","pow","trackingData","setTrackingData","data","geometry","coordinates","showPopup","setShowPopup","properties","width","icon","pixelRatio","length","TrackingDrawWrapper","crops","console","log","features","map","feature","index"],"mappings":"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","sourcesContent":["import { memo, useEffect, useState } from \"react\";\r\nimport { Feature, Image, Layer, Marker, Popup, Source } from \"react-mapbox-gl\";\r\nimport { getTrackingData } from \"./getTrackingData\";\r\ninterface ITrackingDrawWrapperProps {\r\n  endpoint?: string;\r\n  crops: any;\r\n  zoom?: number;\r\n}\r\n\r\nconst TrackingDrawDevice = ({ endpoint, cropData, deviceId, zoom }: any) => {\r\n  const paintStyles = (baseWidth: number) => {\r\n    const baseZoom = zoom ? zoom : 16;\r\n    return {\r\n      \"line-color\": \"yellow\",\r\n      \"line-opacity\": 0.5,\r\n      \"line-width\": {\r\n        type: \"exponential\",\r\n        base: 2,\r\n        stops: [\r\n          [0, baseWidth * Math.pow(2, 0 - baseZoom)],\r\n          [24, baseWidth * Math.pow(2, 24 - baseZoom)],\r\n        ],\r\n      },\r\n    };\r\n  };\r\n\r\n  const [trackingData, setTrackingData] = useState<any>({\r\n    type: \"geojson\",\r\n    data: {\r\n      type: \"Feature\",\r\n      geometry: {\r\n        type: \"LineString\",\r\n        coordinates: [],\r\n      },\r\n    },\r\n  });\r\n\r\n  const [showPopup, setShowPopup] = useState(false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      setTrackingData({});\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (endpoint) getTrackingData(0, endpoint, setTrackingData, deviceId);\r\n  }, [endpoint, deviceId]);\r\n  return (\r\n    <div>\r\n      <Source id={`device${deviceId}`} geoJsonSource={trackingData} />\r\n      <Layer\r\n        type=\"line\"\r\n        id={`device${deviceId}`}\r\n        sourceId={`device${deviceId}`}\r\n        paint={paintStyles(cropData.properties.width)}\r\n      />\r\n\r\n      <Image\r\n        id={`device${deviceId}-icon`}\r\n        url={cropData.properties.icon}\r\n        options={{ pixelRatio: 6 }}\r\n      />\r\n      {trackingData.data.geometry.coordinates.length > 0 && (\r\n        <div>\r\n          <Layer\r\n            type=\"symbol\"\r\n            id={`marker${deviceId}`}\r\n            layout={{ \"icon-image\": `device${deviceId}-icon` }}\r\n          >\r\n            <Feature\r\n              coordinates={\r\n                trackingData.data.geometry.coordinates[\r\n                  trackingData.data.geometry.coordinates.length - 1\r\n                ]\r\n              }\r\n              onClick={() => setShowPopup(!showPopup)}\r\n            />\r\n          </Layer>\r\n          {showPopup && (\r\n            <Popup\r\n              coordinates={\r\n                trackingData.data.geometry.coordinates[\r\n                  trackingData.data.geometry.coordinates.length - 1\r\n                ]\r\n              }\r\n            >\r\n              <div>\r\n                Coordinates:\r\n                {\r\n                  trackingData.data.geometry.coordinates[\r\n                    trackingData.data.geometry.coordinates.length - 1\r\n                  ]\r\n                }\r\n              </div>\r\n            </Popup>\r\n          )}\r\n        </div>\r\n        // <Marker\r\n        //   coordinates={\r\n        //     trackingData.data.geometry.coordinates[\r\n        //       trackingData.data.geometry.coordinates.length - 1\r\n        //     ]\r\n        //   }\r\n        //   anchor=\"bottom\"\r\n        // >\r\n        //   <img src={cropData.properties.icon} style={{ height: \"20px\" }} />\r\n        // </Marker>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TrackingDrawWrapper: React.FC<ITrackingDrawWrapperProps> = ({\r\n  endpoint,\r\n  crops,\r\n  zoom,\r\n}) => {\r\n  useEffect(() => {\r\n    console.log(\"track render\");\r\n  });\r\n  return (\r\n    <div>\r\n      {crops &&\r\n        crops.data.features.map((feature: any, index: number) => (\r\n          <TrackingDrawDevice\r\n            key={feature.properties.width}\r\n            endpoint={endpoint}\r\n            cropData={feature}\r\n            deviceId={index}\r\n            zoom={zoom}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrackingDrawWrapper;\r\n"]},"metadata":{},"sourceType":"module"}