{"ast":null,"code":"var _jsxFileName = \"E:\\\\imet\\\\mapbox-module\\\\react-mapbox\\\\src\\\\FieldCreate\\\\FieldCreate.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./style.css\";\nimport Mapbox from \"../Mapbox\";\nimport { Button, Form, Input } from \"antd\";\nimport { useRef } from \"react\";\nimport { drawStyles } from \"./MapboxStyle\";\nimport { displayStyles } from \"./MapboxConfig\";\nimport * as turf from \"@turf/turf\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FieldCreate = () => {\n  _s();\n\n  const mapRef = useRef();\n  const history = useHistory();\n  const accessToken = \"pk.eyJ1IjoidHB3Mjg0IiwiYSI6ImNrc2VrYnk0bjExaWIybnJveGFtOGV0eDAifQ.pSJ4eAaCbdrjhzmqXMRK_A\"; // Get data from localstorage\n  // const fieldData = localStorage.getItem(\"fields\");\n  // let JSONData = \"\";\n  // if (fieldData) JSONData = JSON.parse(fieldData);\n  // console.log(JSONData);\n\n  const handleSubmit = value => {\n    // TODO: CALL API SAVE TO DB\n    // TODO: REDIRECT BACK TO MAIN\n    // get draw geoJson data\n    const drawData = mapRef.current.getDrawData();\n    const areaField = Math.round(turf.area(drawData) * 100) / 100;\n    const createDate = new Date();\n    const style = {\n      Name: \"fdfd\",\n      fill: \"#00A26A\",\n      \"fill-opacity\": 0.9,\n      stroke: \"#de3529\",\n      \"stroke-width\": 1\n    };\n    const newDrawData = { ...drawData,\n      features: [{ ...drawData.features[0],\n        properties: style\n      }]\n    };\n    const drawUrl = encodeURIComponent(JSON.stringify(newDrawData));\n    const imgField = `https://api.mapbox.com/v4/mapbox.satellite/geojson(${drawUrl})/auto/200x200.jpg?access_token=${accessToken}`; //save to localstorage\n\n    const saveData = {\n      name: value.fieldName,\n      area: areaField,\n      bounding: drawData,\n      createdAt: createDate,\n      img: imgField\n    }; // localStorage.setItem(value.fieldName, JSON.stringify(saveData));\n\n    fetch(process.env.REACT_APP_API_URL, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify(saveData) // body data type must match \"Content-Type\" header\n\n    }).then(data => {\n      // console.log(data)\n      history.push(\"/field/list\");\n    }).catch(err => console.log(err)); //update fake db on local storage\n    // const oldFakeData = localStorage.getItem(\"fakeDB\");\n    // let updateFakeData;\n    // if (oldFakeData) {\n    //   updateFakeData = JSON.parse(oldFakeData).concat(value.fieldName);\n    // } else updateFakeData = [value.fieldName];\n    // localStorage.setItem(\"fakeDB\", JSON.stringify(updateFakeData));\n    // history.push(\"/list\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title fw-bold fs-3 mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Create Field on the Map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"create-form\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onFinish: handleSubmit,\n          layout: \"inline\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-input\",\n            children: /*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"fieldName\",\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                placeholder: \"Field name\",\n                size: \"large\",\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"submit-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              type: \"default\",\n              size: \"large\",\n              onClick: () => history.push(\"/list\"),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"primary\",\n              htmlType: \"submit\",\n              size: \"large\" // onClick={handleSubmit}\n              ,\n              children: \"Create\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mapbox-container\",\n      children: /*#__PURE__*/_jsxDEV(Mapbox, {\n        ref: mapRef,\n        accessToken: accessToken // data={JSONData}\n        ,\n        drawStyles: drawStyles,\n        displayStyles: displayStyles,\n        maxWidth: \"100%\",\n        height: \"calc(100vh - 220px)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FieldCreate, \"ejbkTr4Ie+N8aKjSTxTb0d9iqFU=\", false, function () {\n  return [useHistory];\n});\n\n_c = FieldCreate;\nexport default FieldCreate;\n\nvar _c;\n\n$RefreshReg$(_c, \"FieldCreate\");","map":{"version":3,"sources":["E:/imet/mapbox-module/react-mapbox/src/FieldCreate/FieldCreate.tsx"],"names":["Mapbox","Button","Form","Input","useRef","drawStyles","displayStyles","turf","useHistory","FieldCreate","mapRef","history","accessToken","handleSubmit","value","drawData","current","getDrawData","areaField","Math","round","area","createDate","Date","style","Name","fill","stroke","newDrawData","features","properties","drawUrl","encodeURIComponent","JSON","stringify","imgField","saveData","name","fieldName","bounding","createdAt","img","fetch","process","env","REACT_APP_API_URL","method","mode","cache","credentials","headers","body","then","data","push","catch","err","console","log"],"mappings":"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","sourcesContent":["import \"./style.css\";\r\nimport Mapbox from \"../Mapbox\";\r\nimport { Button, Form, Input } from \"antd\";\r\nimport { useRef } from \"react\";\r\nimport { drawStyles } from \"./MapboxStyle\";\r\nimport { displayStyles } from \"./MapboxConfig\";\r\nimport * as turf from \"@turf/turf\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst FieldCreate = () => {\r\n  const mapRef = useRef();\r\n  const history = useHistory();\r\n  const accessToken =\r\n    \"pk.eyJ1IjoidHB3Mjg0IiwiYSI6ImNrc2VrYnk0bjExaWIybnJveGFtOGV0eDAifQ.pSJ4eAaCbdrjhzmqXMRK_A\";\r\n\r\n  // Get data from localstorage\r\n  // const fieldData = localStorage.getItem(\"fields\");\r\n  // let JSONData = \"\";\r\n  // if (fieldData) JSONData = JSON.parse(fieldData);\r\n  // console.log(JSONData);\r\n\r\n  const handleSubmit = (value: any) => {\r\n    // TODO: CALL API SAVE TO DB\r\n    // TODO: REDIRECT BACK TO MAIN\r\n\r\n    // get draw geoJson data\r\n    const drawData = (mapRef.current as any).getDrawData();\r\n\r\n    const areaField = Math.round(turf.area(drawData) * 100) / 100;\r\n    const createDate = new Date();\r\n\r\n    const style = {\r\n      Name: \"fdfd\",\r\n      fill: \"#00A26A\",\r\n      \"fill-opacity\": 0.9,\r\n      stroke: \"#de3529\",\r\n      \"stroke-width\": 1,\r\n    };\r\n\r\n    const newDrawData = {\r\n      ...drawData,\r\n      features: [\r\n        {\r\n          ...drawData.features[0],\r\n          properties: style,\r\n        },\r\n      ],\r\n    };\r\n\r\n    const drawUrl = encodeURIComponent(JSON.stringify(newDrawData));\r\n    const imgField = `https://api.mapbox.com/v4/mapbox.satellite/geojson(${drawUrl})/auto/200x200.jpg?access_token=${accessToken}`;\r\n\r\n    //save to localstorage\r\n    const saveData = {\r\n      name: value.fieldName,\r\n      area: areaField,\r\n      bounding: drawData,\r\n      createdAt: createDate,\r\n      img: imgField,\r\n    };\r\n    // localStorage.setItem(value.fieldName, JSON.stringify(saveData));\r\n\r\n    fetch(process.env.REACT_APP_API_URL!, {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      cache: \"no-cache\",\r\n      credentials: \"same-origin\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: JSON.stringify(saveData), // body data type must match \"Content-Type\" header\r\n    })\r\n      .then((data) => {\r\n        // console.log(data)\r\n        history.push(\"/field/list\");\r\n      })\r\n      .catch((err) => console.log(err));\r\n\r\n    //update fake db on local storage\r\n    // const oldFakeData = localStorage.getItem(\"fakeDB\");\r\n    // let updateFakeData;\r\n    // if (oldFakeData) {\r\n    //   updateFakeData = JSON.parse(oldFakeData).concat(value.fieldName);\r\n    // } else updateFakeData = [value.fieldName];\r\n    // localStorage.setItem(\"fakeDB\", JSON.stringify(updateFakeData));\r\n\r\n    // history.push(\"/list\");\r\n  };\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"content\">\r\n        <div className=\"title fw-bold fs-3 mb-4\">\r\n          <div>Create Field on the Map</div>\r\n        </div>\r\n        <div className=\"create-form\">\r\n          <Form onFinish={handleSubmit} layout=\"inline\">\r\n            <div className=\"create-input\">\r\n              <Form.Item name=\"fieldName\">\r\n                <Input placeholder=\"Field name\" size=\"large\" required></Input>\r\n              </Form.Item>\r\n            </div>\r\n            <div className=\"submit-buttons\">\r\n              <Button\r\n                type=\"default\"\r\n                size=\"large\"\r\n                onClick={() => history.push(\"/list\")}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                size=\"large\"\r\n                // onClick={handleSubmit}\r\n              >\r\n                Create\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n      <div className=\"mapbox-container\">\r\n        <Mapbox\r\n          ref={mapRef}\r\n          accessToken={accessToken}\r\n          // data={JSONData}\r\n          drawStyles={drawStyles}\r\n          displayStyles={displayStyles}\r\n          maxWidth=\"100%\"\r\n          height=\"calc(100vh - 220px)\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FieldCreate;\r\n"]},"metadata":{},"sourceType":"module"}