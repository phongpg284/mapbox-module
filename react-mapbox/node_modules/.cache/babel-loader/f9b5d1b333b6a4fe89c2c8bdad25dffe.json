{"ast":null,"code":"var _jsxFileName = \"E:\\\\imet\\\\mapbox-module\\\\react-mapbox\\\\src\\\\Mapbox\\\\Mapbox.tsx\",\n    _s = $RefreshSig$();\n\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\nimport \"./style.css\";\nimport { forwardRef, memo, useImperativeHandle, useRef, useState } from \"react\";\nimport { render } from \"react-dom\";\nimport { Radio, Space } from \"antd\";\nimport mapboxgl from \"mapbox-gl\";\nimport { FullscreenControl, GeolocateControl, NavigationControl, ScaleControl } from \"mapbox-gl\";\nimport ReactMapboxGl, { Layer, Source } from \"react-mapbox-gl\";\nimport DrawControl from \"react-mapbox-gl-draw\";\nimport { defaultDrawStyles } from \"./style\";\nimport { defaultAccessToken, defaultCenter, defaultZoom, workAreaShowFieldDisplay, workAreaShowLineDisplay, workAreaFillPaint, workAreaLinePaint, cropsShowFieldDisplay, cropsShowLineDisplay, cropsFillPaint, cropsLinePaint } from \"./config\";\nimport TrackingDrawWrapper from \"./TrackingDrawWrapper\"; // @ts-ignore\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.workerClass = require(\"mapbox-gl/dist/mapbox-gl-csp-worker\").default; //@ts-ignore\n\nReactMapboxGl.workerClass = require(\"mapbox-gl/dist/mapbox-gl-csp-worker\").default;\nconst Mapbox = /*#__PURE__*/memo(_c2 = /*#__PURE__*/forwardRef(_c = _s(({ ...props\n}, ref) => {\n  var _mapboxInstance$curre;\n\n  _s();\n\n  let drawRef;\n  const [visibleLayer, setVisibleLayer] = useState(\"satellite-v9\");\n  const mapboxInstance = useRef(null);\n  const Map = ReactMapboxGl({\n    accessToken: props.accessToken ? props.accessToken : defaultAccessToken,\n    maxZoom: 23,\n    scrollZoom: !props.disableScrollZoom\n  });\n\n  const handleChangeLayer = e => {\n    setVisibleLayer(e.target.value);\n  };\n\n  const menu = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"layers\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"layer-option\",\n      children: /*#__PURE__*/_jsxDEV(Radio.Group, {\n        onChange: handleChangeLayer,\n        value: visibleLayer,\n        children: /*#__PURE__*/_jsxDEV(Space, {\n          direction: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(Radio, {\n            value: \"satellite-v9\",\n            className: \"float-start fs-5\",\n            children: \"satellite\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Radio, {\n            value: \"light-v10\",\n            className: \"float-start fs-5\",\n            children: \"light\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Radio, {\n            value: \"dark-v10\",\n            className: \"float-start fs-5\",\n            children: \"dark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Radio, {\n            value: \"streets-v11\",\n            className: \"float-start fs-5\",\n            children: \"streets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 7\n  }, this);\n\n  class LayerControl {\n    constructor() {\n      this._map = void 0;\n      this._container = void 0;\n    }\n\n    onAdd(map) {\n      this._map = map;\n      this._container = document.createElement(\"div\");\n      this._container.className = \"mapboxgl-ctrl\";\n      render(menu, this._container);\n      return this._container;\n    }\n\n    onRemove() {\n      this._container.parentNode.removeChild(this._container);\n\n      this._map = undefined;\n    }\n\n  } // const popup = new mapboxgl.Popup({\n  //   anchor: \"top-left\",\n  // });\n  // const drawData = (data: any, id: number, mapbox: any, markers: any) => {\n  //   if (!mapbox._fullyLoaded) return;\n  //   const newData = data.map((coordinate: any) => [\n  //     coordinate.y,\n  //     coordinate.x,\n  //   ]);\n  //   if (mapbox) {\n  //     console.log(mapbox);\n  //     const existData = mapbox?.getSource(`deviceNo${id}`)._data;\n  //     markers[id].setLngLat(newData[newData.length - 1]).addTo(mapbox);\n  //     const convertData = turf.lineString(\n  //       existData.geometry.coordinates.concat(newData)\n  //     );\n  //     mapbox?.getSource(`deviceNo${id}`)?.setData(convertData);\n  //   } else return;\n  // };\n\n\n  const mapDidLoad = mapbox => {\n    console.log(\"map render\");\n    if (props.disableScrollZoom) mapbox.doubleClickZoom.disable();\n    if (props.lockZoom) mapbox.setMinZoom(mapbox.getZoom());\n    console.log(mapbox.getZoom()); // if (props.trackingApiEndpoint && props.crops) {\n    //   let markers: any = [];\n    //   for (let i = 0; i < props.crops.data.features.length; i++) {\n    //     let baseWidth = props.crops.data.features[i].properties.width;\n    //     let baseZoom = 16;\n    //     mapbox.addSource(`deviceNo${i}`, {\n    //       type: \"geojson\",\n    //       data: {\n    //         type: \"Feature\",\n    //         properties: {},\n    //         geometry: {\n    //           type: \"Point\",\n    //           coordinates: [],\n    //         },\n    //       },\n    //     });\n    //     mapbox.addLayer({\n    //       id: `deviceNo${i}`,\n    //       type: \"line\",\n    //       source: `deviceNo${i}`,\n    //       paint: {\n    //         \"line-color\": \"yellow\",\n    //         \"line-opacity\": 0.4,\n    //         \"line-width\": {\n    //           type: \"exponential\",\n    //           base: 2,\n    //           stops: [\n    //             [0, baseWidth * Math.pow(2, 0 - baseZoom)],\n    //             [24, baseWidth * Math.pow(2, 24 - baseZoom)],\n    //           ],\n    //         },\n    //       },\n    //     });\n    //     let el = document.createElement(\"img\");\n    //     el.src = props.crops.data.features[i].properties.icon;\n    //     el.style.height = \"20px\";\n    //     markers.push(new mapboxgl.Marker(el));\n    //   }\n    //   // for (let i = 0; i < props.crops.data.features.length; i++) {\n    //   //   getTrackingData(\n    //   //     0,\n    //   //     props.trackingApiEndpoint,\n    //   //     drawData,\n    //   //     i,\n    //   //     mapbox,\n    //   //     markers\n    //   //   );\n    //   // }\n    // }\n\n    mapboxInstance.current = mapbox;\n    mapbox.addControl(new ScaleControl(), \"bottom-left\");\n    mapbox.addControl(new GeolocateControl({\n      positionOptions: {\n        enableHighAccuracy: true\n      },\n      trackUserLocation: true,\n      showUserHeading: true\n    }), \"bottom-right\");\n    mapbox.addControl(new NavigationControl(), \"bottom-right\");\n    mapbox.addControl(new FullscreenControl({\n      container: document.querySelector(\".mapboxgl-map\")\n    }), \"bottom-right\");\n    mapbox.addControl(new LayerControl(), \"top-right\");\n  };\n\n  useImperativeHandle(ref, () => ({\n    getDrawData() {\n      const drawData = drawRef.draw.getAll();\n      return drawData;\n    }\n\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Map, {\n      style: `mapbox://styles/mapbox/${visibleLayer}`,\n      containerStyle: {\n        height: props.height ? props.height : \"100vh\",\n        width: props.width ? props.width : \"100vw\",\n        maxWidth: props.maxWidth ? props.maxWidth : \"100%\",\n        maxHeight: props.maxHeight ? props.maxHeight : \"100%\"\n      },\n      center: props.center ? props.center : defaultCenter,\n      zoom: props.zoom ? [props.zoom] : defaultZoom,\n      onStyleLoad: mapDidLoad,\n      fitBounds: props.fitBounds,\n      fitBoundsOptions: {\n        padding: {\n          top: 10,\n          bottom: 25,\n          left: 15,\n          right: 5\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-display\",\n        children: [props.workArea && (workAreaShowFieldDisplay || workAreaShowLineDisplay) && /*#__PURE__*/_jsxDEV(Source, {\n          id: \"work_area\",\n          geoJsonSource: props.workArea\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 17\n        }, this), props.workArea && workAreaShowFieldDisplay && /*#__PURE__*/_jsxDEV(Layer, {\n          type: \"fill\",\n          id: \"polygon-fill\",\n          sourceId: \"work_area\",\n          paint: workAreaFillPaint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 15\n        }, this), props.workArea && workAreaShowLineDisplay && /*#__PURE__*/_jsxDEV(Layer, {\n          type: \"line\",\n          id: \"lines_work_area\",\n          sourceId: \"work_area\",\n          paint: workAreaLinePaint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 15\n        }, this), props.crops && (cropsShowFieldDisplay || cropsShowLineDisplay) && /*#__PURE__*/_jsxDEV(Source, {\n          id: \"crops\",\n          geoJsonSource: props.crops\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 15\n        }, this), props.crops && cropsShowFieldDisplay && /*#__PURE__*/_jsxDEV(Layer, {\n          type: \"fill\",\n          id: \"polygon-fill\",\n          sourceId: \"crops\",\n          paint: cropsFillPaint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 15\n        }, this), props.crops && cropsShowLineDisplay && /*#__PURE__*/_jsxDEV(Layer, {\n          type: \"line\",\n          id: \"lines_crops\",\n          sourceId: \"crops\",\n          paint: cropsLinePaint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(TrackingDrawWrapper, {\n          endpoint: props.trackingApiEndpoint,\n          crops: props.crops,\n          zoom: mapboxInstance === null || mapboxInstance === void 0 ? void 0 : (_mapboxInstance$curre = mapboxInstance.current) === null || _mapboxInstance$curre === void 0 ? void 0 : _mapboxInstance$curre.getZoom()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this), mapboxInstance && /*#__PURE__*/_jsxDEV(DrawControl, {\n        ref: drawControl => drawRef = drawControl,\n        displayControlsDefault: false,\n        controls: {\n          polygon: true,\n          trash: true\n        },\n        default_mode: \"draw_polygon\",\n        position: \"bottom-right\",\n        styles: props.drawStyles ? props.drawStyles : defaultDrawStyles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 7\n  }, this);\n}, \"sPvz8ewwzsAjA64B0jD1VJXdc2A=\", false, function () {\n  return [useImperativeHandle];\n})));\n_c3 = Mapbox;\nexport default Mapbox;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Mapbox$memo$forwardRef\");\n$RefreshReg$(_c2, \"Mapbox$memo\");\n$RefreshReg$(_c3, \"Mapbox\");","map":{"version":3,"sources":["E:/imet/mapbox-module/react-mapbox/src/Mapbox/Mapbox.tsx"],"names":["forwardRef","memo","useImperativeHandle","useRef","useState","render","Radio","Space","mapboxgl","FullscreenControl","GeolocateControl","NavigationControl","ScaleControl","ReactMapboxGl","Layer","Source","DrawControl","defaultDrawStyles","defaultAccessToken","defaultCenter","defaultZoom","workAreaShowFieldDisplay","workAreaShowLineDisplay","workAreaFillPaint","workAreaLinePaint","cropsShowFieldDisplay","cropsShowLineDisplay","cropsFillPaint","cropsLinePaint","TrackingDrawWrapper","workerClass","require","default","Mapbox","props","ref","drawRef","visibleLayer","setVisibleLayer","mapboxInstance","Map","accessToken","maxZoom","scrollZoom","disableScrollZoom","handleChangeLayer","e","target","value","menu","LayerControl","_map","_container","onAdd","map","document","createElement","className","onRemove","parentNode","removeChild","undefined","mapDidLoad","mapbox","console","log","doubleClickZoom","disable","lockZoom","setMinZoom","getZoom","current","addControl","positionOptions","enableHighAccuracy","trackUserLocation","showUserHeading","container","querySelector","getDrawData","drawData","draw","getAll","height","width","maxWidth","maxHeight","center","zoom","fitBounds","padding","top","bottom","left","right","workArea","crops","trackingApiEndpoint","drawControl","polygon","trash","drawStyles"],"mappings":"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","sourcesContent":["import \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\r\nimport \"./style.css\";\r\n\r\nimport {\r\n  forwardRef,\r\n  memo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\nimport { Radio, Space } from \"antd\";\r\nimport * as turf from \"@turf/turf\";\r\n\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport {\r\n  FullscreenControl,\r\n  GeolocateControl,\r\n  NavigationControl,\r\n  ScaleControl,\r\n} from \"mapbox-gl\";\r\nimport ReactMapboxGl, { Layer, Source } from \"react-mapbox-gl\";\r\nimport DrawControl from \"react-mapbox-gl-draw\";\r\n\r\nimport { defaultDrawStyles } from \"./style\";\r\nimport {\r\n  defaultAccessToken,\r\n  defaultCenter,\r\n  defaultZoom,\r\n  workAreaShowFieldDisplay,\r\n  workAreaShowLineDisplay,\r\n  workAreaFillPaint,\r\n  workAreaLinePaint,\r\n  cropsShowFieldDisplay,\r\n  cropsShowLineDisplay,\r\n  cropsFillPaint,\r\n  cropsLinePaint,\r\n} from \"./config\";\r\nimport TrackingDrawWrapper from \"./TrackingDrawWrapper\";\r\n\r\n// @ts-ignore\r\nmapboxgl.workerClass = require(\"mapbox-gl/dist/mapbox-gl-csp-worker\").default;\r\n\r\n//@ts-ignore\r\nReactMapboxGl.workerClass =\r\n  require(\"mapbox-gl/dist/mapbox-gl-csp-worker\").default;\r\n\r\ntype LayerType = \"streets-v11\" | \"satellite-v9\" | \"light-v10\" | \"dark-v10\";\r\ninterface IProps {\r\n  accessToken: string;\r\n  height: string;\r\n  width: string;\r\n  maxHeight: string;\r\n  maxWidth: string;\r\n  drawStyles: any;\r\n  displayStyles: any;\r\n  center: [number, number];\r\n  zoom: number;\r\n  interactive: boolean;\r\n  disableScrollZoom: boolean;\r\n  fitBounds: any;\r\n  workArea: any;\r\n  crops: any;\r\n  trackingApiEndpoint: string;\r\n  lockZoom: boolean;\r\n}\r\n\r\nconst Mapbox: any = memo(\r\n  forwardRef<any, Partial<IProps>>(({ ...props }, ref) => {\r\n    let drawRef: any;\r\n    const [visibleLayer, setVisibleLayer] = useState<LayerType>(\"satellite-v9\");\r\n    const mapboxInstance = useRef(null);\r\n    const Map = ReactMapboxGl({\r\n      accessToken: props.accessToken ? props.accessToken : defaultAccessToken,\r\n      maxZoom: 23,\r\n      scrollZoom: !props.disableScrollZoom,\r\n    });\r\n\r\n    const handleChangeLayer = (e: any) => {\r\n      setVisibleLayer(e.target.value);\r\n    };\r\n\r\n    const menu = (\r\n      <div className=\"layers\">\r\n        <div className=\"layer-option\">\r\n          <Radio.Group onChange={handleChangeLayer} value={visibleLayer}>\r\n            <Space direction=\"vertical\">\r\n              <Radio value=\"satellite-v9\" className=\"float-start fs-5\">\r\n                satellite\r\n              </Radio>\r\n              <Radio value=\"light-v10\" className=\"float-start fs-5\">\r\n                light\r\n              </Radio>\r\n              <Radio value=\"dark-v10\" className=\"float-start fs-5\">\r\n                dark\r\n              </Radio>\r\n              <Radio value=\"streets-v11\" className=\"float-start fs-5\">\r\n                streets\r\n              </Radio>\r\n            </Space>\r\n          </Radio.Group>\r\n        </div>\r\n      </div>\r\n    );\r\n    class LayerControl {\r\n      _map: any;\r\n      _container: any;\r\n      onAdd(map: any) {\r\n        this._map = map;\r\n        this._container = document.createElement(\"div\");\r\n        this._container.className = \"mapboxgl-ctrl\";\r\n        render(menu, this._container);\r\n        return this._container;\r\n      }\r\n\r\n      onRemove() {\r\n        this._container.parentNode.removeChild(this._container);\r\n        this._map = undefined;\r\n      }\r\n    }\r\n\r\n    // const popup = new mapboxgl.Popup({\r\n    //   anchor: \"top-left\",\r\n    // });\r\n    // const drawData = (data: any, id: number, mapbox: any, markers: any) => {\r\n    //   if (!mapbox._fullyLoaded) return;\r\n    //   const newData = data.map((coordinate: any) => [\r\n    //     coordinate.y,\r\n    //     coordinate.x,\r\n    //   ]);\r\n\r\n    //   if (mapbox) {\r\n    //     console.log(mapbox);\r\n    //     const existData = mapbox?.getSource(`deviceNo${id}`)._data;\r\n\r\n    //     markers[id].setLngLat(newData[newData.length - 1]).addTo(mapbox);\r\n\r\n    //     const convertData = turf.lineString(\r\n    //       existData.geometry.coordinates.concat(newData)\r\n    //     );\r\n    //     mapbox?.getSource(`deviceNo${id}`)?.setData(convertData);\r\n    //   } else return;\r\n    // };\r\n\r\n    const mapDidLoad = (mapbox: any) => {\r\n      console.log(\"map render\");\r\n      if (props.disableScrollZoom) mapbox.doubleClickZoom.disable();\r\n      \r\n      if(props.lockZoom)\r\n      mapbox.setMinZoom(mapbox.getZoom())\r\n      console.log(mapbox.getZoom());\r\n      // if (props.trackingApiEndpoint && props.crops) {\r\n      //   let markers: any = [];\r\n      //   for (let i = 0; i < props.crops.data.features.length; i++) {\r\n      //     let baseWidth = props.crops.data.features[i].properties.width;\r\n      //     let baseZoom = 16;\r\n      //     mapbox.addSource(`deviceNo${i}`, {\r\n      //       type: \"geojson\",\r\n      //       data: {\r\n      //         type: \"Feature\",\r\n      //         properties: {},\r\n      //         geometry: {\r\n      //           type: \"Point\",\r\n      //           coordinates: [],\r\n      //         },\r\n      //       },\r\n      //     });\r\n      //     mapbox.addLayer({\r\n      //       id: `deviceNo${i}`,\r\n      //       type: \"line\",\r\n      //       source: `deviceNo${i}`,\r\n      //       paint: {\r\n      //         \"line-color\": \"yellow\",\r\n      //         \"line-opacity\": 0.4,\r\n      //         \"line-width\": {\r\n      //           type: \"exponential\",\r\n      //           base: 2,\r\n      //           stops: [\r\n      //             [0, baseWidth * Math.pow(2, 0 - baseZoom)],\r\n      //             [24, baseWidth * Math.pow(2, 24 - baseZoom)],\r\n      //           ],\r\n      //         },\r\n      //       },\r\n      //     });\r\n\r\n      //     let el = document.createElement(\"img\");\r\n      //     el.src = props.crops.data.features[i].properties.icon;\r\n      //     el.style.height = \"20px\";\r\n\r\n      //     markers.push(new mapboxgl.Marker(el));\r\n      //   }\r\n\r\n      //   // for (let i = 0; i < props.crops.data.features.length; i++) {\r\n      //   //   getTrackingData(\r\n      //   //     0,\r\n      //   //     props.trackingApiEndpoint,\r\n      //   //     drawData,\r\n      //   //     i,\r\n      //   //     mapbox,\r\n      //   //     markers\r\n      //   //   );\r\n      //   // }\r\n      // }\r\n\r\n      mapboxInstance.current = mapbox;\r\n      mapbox.addControl(new ScaleControl(), \"bottom-left\");\r\n      mapbox.addControl(\r\n        new GeolocateControl({\r\n          positionOptions: {\r\n            enableHighAccuracy: true,\r\n          },\r\n          trackUserLocation: true,\r\n          showUserHeading: true,\r\n        }),\r\n        \"bottom-right\"\r\n      );\r\n      mapbox.addControl(new NavigationControl(), \"bottom-right\");\r\n      mapbox.addControl(\r\n        new FullscreenControl({\r\n          container: document.querySelector(\".mapboxgl-map\") as any,\r\n        }),\r\n        \"bottom-right\"\r\n      );\r\n      mapbox.addControl(new LayerControl(), \"top-right\");\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      getDrawData() {\r\n        const drawData = drawRef.draw.getAll();\r\n        return drawData;\r\n      },\r\n    }));\r\n\r\n    return (\r\n      <div>\r\n        <Map\r\n          style={`mapbox://styles/mapbox/${visibleLayer}`}\r\n          containerStyle={{\r\n            height: props.height ? props.height : \"100vh\",\r\n            width: props.width ? props.width : \"100vw\",\r\n            maxWidth: props.maxWidth ? props.maxWidth : \"100%\",\r\n            maxHeight: props.maxHeight ? props.maxHeight : \"100%\",\r\n          }}\r\n          center={props.center ? props.center : defaultCenter}\r\n          zoom={props.zoom ? [props.zoom] : defaultZoom}\r\n          onStyleLoad={mapDidLoad}\r\n          fitBounds={props.fitBounds}\r\n          fitBoundsOptions={{\r\n            padding: { top: 10, bottom: 25, left: 15, right: 5 },\r\n          }}\r\n        >\r\n          <div className=\"data-display\">\r\n            {props.workArea &&\r\n              (workAreaShowFieldDisplay || workAreaShowLineDisplay) && (\r\n                <Source id=\"work_area\" geoJsonSource={props.workArea} />\r\n              )}\r\n            {props.workArea && workAreaShowFieldDisplay && (\r\n              <Layer\r\n                type=\"fill\"\r\n                id=\"polygon-fill\"\r\n                sourceId=\"work_area\"\r\n                paint={workAreaFillPaint}\r\n              />\r\n            )}\r\n            {props.workArea && workAreaShowLineDisplay && (\r\n              <Layer\r\n                type=\"line\"\r\n                id=\"lines_work_area\"\r\n                sourceId=\"work_area\"\r\n                paint={workAreaLinePaint}\r\n              />\r\n            )}\r\n\r\n            {props.crops && (cropsShowFieldDisplay || cropsShowLineDisplay) && (\r\n              <Source id=\"crops\" geoJsonSource={props.crops} />\r\n            )}\r\n            {props.crops && cropsShowFieldDisplay && (\r\n              <Layer\r\n                type=\"fill\"\r\n                id=\"polygon-fill\"\r\n                sourceId=\"crops\"\r\n                paint={cropsFillPaint}\r\n              />\r\n            )}\r\n            {props.crops && cropsShowLineDisplay && (\r\n              <Layer\r\n                type=\"line\"\r\n                id=\"lines_crops\"\r\n                sourceId=\"crops\"\r\n                paint={cropsLinePaint}\r\n              />\r\n            )}\r\n\r\n            <TrackingDrawWrapper\r\n              endpoint={props.trackingApiEndpoint}\r\n              crops={props.crops}\r\n              zoom={(mapboxInstance?.current as any)?.getZoom()}\r\n            />\r\n          </div>\r\n\r\n          {mapboxInstance && (\r\n            <DrawControl\r\n              ref={(drawControl) => (drawRef = drawControl)}\r\n              displayControlsDefault={false}\r\n              controls={{ polygon: true, trash: true }}\r\n              default_mode=\"draw_polygon\"\r\n              position=\"bottom-right\"\r\n              styles={props.drawStyles ? props.drawStyles : defaultDrawStyles}\r\n            />\r\n          )}\r\n        </Map>\r\n      </div>\r\n    );\r\n  })\r\n);\r\n\r\nexport default Mapbox;\r\n"]},"metadata":{},"sourceType":"module"}